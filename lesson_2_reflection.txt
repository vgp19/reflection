Author: Vivek Patel

when I create a new git repository, it does not contain any commits nor track any files. Commits have to be created manually. We need to initialize it to create a new git repository for our directory.


Staging area prepares files to be put in git repository from wrking directory. it lets you choose the files that you want to put in git repository.

Add the files to the staging area and update the file and then use diff to compare the changes in working directory and staging area. then use diff --staged to compare the files in staging area and repository. that way we can make sure that there is ony one logical change per commit.


git brnach allows you to create the other version of the program and still keep the master version of the game. This way we can experiment with the program and not worry about loosing the working version of the program.
 

 visualizing a branch structure lets you see where you are right now and hot it might affect the program. we may lose the commit if we don't create a new branch.

 we merge two version of the program to incelude the feature added while working on it on two different branches. We represent in the diagram so that we can see what's reachable and what's not.

 Git automatic merging may creates conflict, whereas manual won't do that.
 but manually you can not figure out what's conflicting.


 When we use git add, we are sending the file to satging area. when we use git commit, we are sending the file to repository.

 commands:
 

q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!





 git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.